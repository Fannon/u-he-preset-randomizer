import { ParamsModel } from "./analyzer";
import { preset, getKeyForParam } from "./parser";
import { PresetLibrary } from "./presetLibrary";
import { log } from "./utils/log";
import { uniqueNamesGenerator, adjectives, colors, names } from "unique-names-generator";

/**
 * Fully randomized presets, with real values from library
 */
export function createFullyRandomPresets(
  presetLibrary: PresetLibrary,
  paramModel: ParamsModel,
  number: number
): PresetLibrary {
  const newPresetLibrary: PresetLibrary = {
    presetRootFolder: presetLibrary.presetRootFolder + '/RANDOM',
    presets: []
  }
  for (let i = 0; i < number; i++) {
    const randomPresetIndex = Math.floor(
      Math.random() * presetLibrary.presets.length
    );
    const randomPreset: preset = JSON.parse(
      JSON.stringify(presetLibrary.presets[randomPresetIndex])
    );

    for (const param of randomPreset.params) {
      const key = getKeyForParam(param);

      const randomParamValue = getRandomArrayItem(paramModel[key]!.values);
      let newParamValue = JSON.parse(JSON.stringify(randomParamValue));

      if (param.value !== newParamValue) {
        // log.debug(`  ${key}: Old: ${param.value} -> New: ${newParamValue}`);
      }
      param.value = newParamValue;
    }

    const randomName = uniqueNamesGenerator({
      dictionaries: [adjectives, colors, names],
      separator: " ",
      style: "capital",
    });

    randomPreset.filePath = `/RND ${randomName}.h2p`;
    randomPreset.presetName = `RND ${randomName}`;
    randomPreset.meta = [
      {
        "key": "Author",
        "value": "Random Generator"
      },
      {
        "key": "Description",
        "value": "Fully random preset, generated by https://github.com/Fannon/u-he-preset-randomizer"
      }
    ],

    log.info(`Generated random preset: ${randomPreset.filePath}`);
    newPresetLibrary.presets.push(randomPreset)
  }
  return newPresetLibrary;
}

//////////////////////////////////////////
// HELPER FUNCTIONS                     //
//////////////////////////////////////////

export function getRandomArrayItem(list: any[]) {
  return list[Math.floor(Math.random() * list.length)];
}
